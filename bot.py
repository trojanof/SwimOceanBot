import json
from io import BytesIO
from tempfile import TemporaryDirectory
from pathlib import Path
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import telebot
from telebot.types import ReactionTypeEmoji
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from settings import (
    TOKEN, SPREADSHEET_ID, WORKSHEET_NAME, user_column_map, SCOPE, START_DATE
)
from datetime import datetime, timezone, timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


# /todo –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
def get_gsheet_client():
    cred_str = st.secrets['CREDS']
    creds_obj = json.loads(cred_str)
    tmp_dir = TemporaryDirectory()
    tmp_dir_path = Path(tmp_dir.name)
    json_path = tmp_dir_path / 'creds.json'
    with open(json_path, 'w') as f:
        f.write(json.dumps(creds_obj, indent=2))
    creds = ServiceAccountCredentials.from_json_keyfile_name(json_path, SCOPE)
    client = gspread.authorize(creds)
    tmp_dir.cleanup()
    return client


def get_df_from_google_sheet(sheet_name):
    client = get_gsheet_client()
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet(WORKSHEET_NAME)
    data = sheet.get_all_values()
    df = pd.DataFrame(data, columns=data[0])[1:]
    return df


def get_statistics_for_period(start_date: str, end_date: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    """
    df = get_df_from_google_sheet(WORKSHEET_NAME)
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.set_index('Date')

    for col in df.columns:
        df[col] = df[col].replace('', 0)
        df[col] = df[col].fillna(0)
        df[col] = df[col].astype(float)

    df = df.reset_index()
    start_date = pd.to_datetime(start_date, dayfirst=True)
    end_date = pd.to_datetime(end_date, dayfirst=True)
    period_df = df[df['Date'].between(start_date, end_date)]
    period_df = period_df.set_index('Date')
    period_df = period_df.drop(['Day_distance', 'Cumulative_sum'], axis=1)
    return period_df


def get_sum_for_period(df):
    sum_df = df.sum().to_frame().reset_index()
    sum_df = sum_df.rename(columns={0: 'sum', 'index': 'people'})
    sum_df = sum_df.sort_values(by='sum', ascending=False)
    sum_df = sum_df[sum_df['sum'] > 0]

    min_date = df.index.min().strftime("%d.%m.%Y")
    max_date = df.index.max().strftime("%d.%m.%Y")

    sum_df = sum_df[sum_df['sum'] > 0]
    fig, ax = plt.subplots(figsize=(12, 6))
    fig.subplots_adjust()
    bar_container = ax.bar(x=sum_df['people'],
                           height=sum_df['sum'],
                           width=0.6,
                           color='green'
                           )
    ax.bar_label(bar_container)
    ax.set(ylabel='–ú–µ—Ç—Ä–∞–∂',
           title=f'–ú–µ—Ç—Ä—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {min_date} - {max_date}'
           )
    ax.tick_params(axis='x', labelrotation=90)

    tmp_dir = TemporaryDirectory()
    tmp_dir_path = Path(tmp_dir.name)
    img_path = tmp_dir_path / 'sum.png'
    fig.savefig(img_path, bbox_inches='tight')

    with open(img_path, 'rb') as file:
        img_data = file.read()

    # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç
    img = BytesIO(img_data)
    tmp_dir.cleanup()
    return img


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
def write_to_sheet(value, usr_name, date):
    try:
        client = get_gsheet_client()
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet(WORKSHEET_NAME)
        """–ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π"""
        dates = sheet.col_values(1)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ A (–æ–Ω —Å –¥–∞—Ç–∞–º–∏)

        usr_name = user_column_map[usr_name]  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ tg-id
        col_names = sheet.row_values(1)  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        col_index = col_names.index(usr_name) + 1
        row_num = dates.index(date) + 1  # +1 —Ç.–∫. –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1
        sheet.update_cell(row_num, col_index, value)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —è—á–µ–π–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–∞–Ω–Ω—ã–µ
        print(f'Value "{value}" appended to sheet')

    except Exception as e:
        print(f'An error occurred: {e}')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–π –±–∞–∑–µ
def get_user_key(message):
    if message.from_user.id:
        user_id = str(message.from_user.id)
        if user_id in user_column_map.keys():
            return user_id
    if message.from_user.username:
        username = message.from_user.username
        if username in user_column_map.keys():
            return username
    else:
        user_frst_name = message.from_user.first_name
        if user_frst_name in user_column_map.keys():
            return user_frst_name
        else:
            return None


def is_date_valid(input_date_str):
    user_date = datetime.strptime(input_date_str, "%d.%m.%Y").date()
    now_utc = datetime.now(timezone.utc)
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ +5 —á–∞—Å–æ–≤ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–Ω—è
    today = (now_utc + timedelta(hours=5)).date()
    return user_date <= today


def plus_message_handling(message):
    return message.text.startswith('+')


def plus_data_message_handing(message):
    return plus_message_handling(message) and message.text.split()[0][1:].isdigit() and len(message.text.split()) == 2


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∏–¥–∞: +–º–µ—Ç—Ä—ã –¥–∞—Ç–∞_–∫—É–¥–∞_–Ω—É–∂–Ω–æ_–∑–∞–ø–∏—Å–∞—Ç—å_–º–µ—Ç—Ä—ã
@bot.message_handler(func=plus_data_message_handing)
def handle_number_with_data_message(message):
    number = message.text.split()[0][1:]
    date = str(message.text.split()[1])
    # –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∏–º–æ–π –¥–∞—Ç—ã
    pattern_of_date = "%d.%m.%Y"  # –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç—ã
    isValid = True
    try:
        isValid = bool(datetime.strptime(date, pattern_of_date))
    except ValueError:
        isValid = False
    if isValid and is_date_valid(date):
        user_key = get_user_key(message)
        if user_key:
            print(f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ: {user_key}')
            write_to_sheet(number, user_key, date)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ –≤ —Ç–∞–±–ª–∏—Ü—É
            bot.reply_to(message, f'–ß–∏—Å–ª–æ {number} –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–∞—Ç—É: {date}')
            bot.set_message_reaction(chat_id=message.chat.id,
                                     message_id=message.id,
                                     reaction=[ReactionTypeEmoji("‚úç")]
                                     )
        else:
            bot.reply_to(message, "–í–∞—Å –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –≤–∞—à–µ–≥–æ ID –Ω–µ—Ç –≤ –æ–±—â–µ–π –±–∞–∑–µ")
    else:
        bot.set_message_reaction(chat_id=message.chat.id,
                                 message_id=message.id,
                                 reaction=[ReactionTypeEmoji("üëé")])
        bot.reply_to(message, '–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤ /help')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "+" –∏ —á–∏—Å–ª–∞
@bot.message_handler(func=plus_message_handling)
def handle_number_message(message):
    number = message.text[1:]
    if plus_message_handling(message) and message.text[1:].isdigit():
        """
        –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è. –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ unix timestamp. –ü—Ä–∏–±–∞–≤–ª—è–µ–º 18000 = 5 —á–∞—Å–æ–≤ —Ç.–∫. –¥–∞—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ GMT+0
        """
        date_obj = datetime.fromtimestamp(message.date + 18000)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –¥–∞—Ç—É –∏–∑ unix timestamp –≤ datetime obj
        date = date_obj.strftime("%d.%m.%Y")  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç -> "13.04.2025"
        user_key = get_user_key(message)
        if user_key:
            print(f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ: {user_key}')
            write_to_sheet(number, user_key, date)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ –≤ —Ç–∞–±–ª–∏—Ü—É

            bot.set_message_reaction(chat_id=message.chat.id,
                                     message_id=message.id,
                                     reaction=[ReactionTypeEmoji("‚úç")]
                                     )
        else:
            msg = ("–í–∞—Å –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –≤–∞—à–µ–≥–æ ID –Ω–µ—Ç –≤ –æ–±—â–µ–π –±–∞–∑–µ. "
                   "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞")
            bot.reply_to(message, msg)
    else:
        bot.set_message_reaction(chat_id=message.chat.id,
                                 message_id=message.id,
                                 reaction=[ReactionTypeEmoji("üëé")])
        bot.reply_to(message, '–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤ /help')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–ª—É–±–∞ SwimOcean, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç, —á—Ç–æ–±—ã –≤—Å–µ –ø—Ä–æ–ø–ª—ã—Ç—ã–µ –º–µ—Ç—Ä—ã –±—ã–ª–∏ —É—á—Ç–µ–Ω—ã –≤ "
                          "–Ω–∞—à–∏—Ö –∑–∞–ø–ª—ã–≤–∞—Ö! "
                          "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é, –∏ —Ñ–æ—Ä–º–∞—Ç, "
                          "–≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –º–µ—Ç—Ä—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.reply_to(message, "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –≤–∏–¥–µ –º–µ—Ç—Ä–æ–≤.\n"
                          "–ó–∞–ø–∏—Å—å –≤ –¥–∞—Ç—ã –≤ –±—É–¥—É—â–µ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n"
                          "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–∞–≤–∏–ª –∑–∞–ø–∏—Å–∏:\n\n"
                          "+<–∫–æ–ª-–≤–æ_–º–µ—Ç—Ä–æ–≤> - –∑–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä—ã (–ø—Ä–∏–º–µ—Ä: +1000)\n"
                          "+<–∫–æ–ª-–≤–æ_–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç–∞> - –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É\n (–ø—Ä–∏–º–µ—Ä: +100 19.04.2025)\n\n"
                          "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/start - –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                          "/help - –≤—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏\n"
                          "/stat_my - –≤—ã–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ø–æ –º–µ—Å—è—Ü–∞–º\n"
                          "/stat_all - –ø–æ–∫–∞–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


def get_month_name(month_number):
    months = ['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
              '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    return months[month_number]


def create_mobile_table(data, title):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    lines = [title, ""]
    for row in data:
        line = " ‚îÇ ".join(f"{str(cell):^8}" for cell in row)
        lines.append(line)
        if row == data[0]:  # –ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            lines.append("‚îÄ" * (len(line) - 1))
    return f"<pre>{chr(10).join(lines)}</pre>"


# –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(commands=['stat_my'])
def handle_pstat(message):
    user_key = get_user_key(message)
    if user_key:
        user_name = user_column_map[user_key]
        start_date = pd.to_datetime(START_DATE, dayfirst=True)
        today = datetime.now().date().strftime("%d.%m.%Y")
        today = pd.to_datetime(today, dayfirst=True)

        period_df = get_statistics_for_period(start_date=start_date,
                                              end_date=today)

        sum_by_month = period_df[[user_name]].copy()
        sum_by_month = sum_by_month.groupby(pd.Grouper(axis=0, freq='m')).sum()
        count_by_month = period_df[[user_name]].copy()
        count_by_month = count_by_month.replace(0, None).groupby(pd.Grouper(axis=0, freq='m')).count()

        merged_df = pd.merge(left=sum_by_month, right=count_by_month, on='Date')
        merged_df = merged_df.reset_index()
        merged_df['Date'] = merged_df['Date'].apply(lambda x: get_month_name(x.month))

        data = [['–ú–µ—Å—è—Ü', '–û–±—ä—ë–º, –º', '–ö–æ–ª-–≤–æ']]
        data.extend(merged_df.values.tolist())

        # table = f"```\n{create_table(data, user_name)}\n```"
        result = create_mobile_table(data, user_name)
        bot.send_message(message.chat.id, result, parse_mode='HTML')
    else:
        msg = ("–í–∞—Å –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –≤–∞—à–µ–≥–æ ID –Ω–µ—Ç –≤ –æ–±—â–µ–π –±–∞–∑–µ. "
               "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞")
        bot.reply_to(message, msg)


# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(commands=['stat_all'])
def handle_all_stat(message):
    start_date = pd.to_datetime(START_DATE, dayfirst=True)
    today = datetime.now().date().strftime("%d.%m.%Y")
    today = pd.to_datetime(today, dayfirst=True)
    period_df = get_statistics_for_period(start_date=start_date,
                                          end_date=today)
    img = get_sum_for_period(period_df)
    bot.send_photo(chat_id=message.chat.id,
                   photo=img,
                   caption='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    st.write('Bot is running...')
    bot.polling(none_stop=True)
    st.stop()
